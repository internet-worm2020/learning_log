# Copyright 2020 Lingfei Kong <colin404@foxmail.com>. All rights reserved.
# Use of this source code is governed by a MIT style
# license that can be found in the LICENSE file.

# This file contains all available configuration options
# with their default values.

# 分析运行的选项。
run:
  # 默认的并发值为可用的 CPU 数量。
  concurrency: 4

  # 分析的超时时间，例如：30s，5m。
  # 默认值：1m
  timeout: 5m

  # 当至少发现一个问题时的退出码。
  issues-exit-code: 1

  # 是否包括测试文件。默认值：true
  tests: true

  # 构建标签列表，所有 linter 都会使用它。
  build-tags:
    - mytag

  # 要跳过的目录：它们的问题不会被报告。
  # 可以在此处使用正则表达式：`generated.*`，正则表达式应用于完整路径，
  # 包括如果已设置路径前缀。
  # 默认值为空列表，
  # 但不管此选项的值是什么，默认目录都会被跳过（参见 skip-dirs-use-default）。
  # "/" 将被当前操作系统的文件路径分隔符替换，以便在 Windows 上正常工作。
  # on Windows.
  skip-dirs:
    - util
    - .*~
    - api/swagger/docs

  # 默认为true。允许跳过目录:
  #   vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  skip-dirs-use-default: true

  # 要跳过哪些文件：将对其进行分析，但会出现问题
  # 不会被报道。默认值为空列表，但有
  # 但没有必要包括所有自动生成的文件，
  # 自动生成的文件。如果不是，请告诉我们。
  # “/”将替换为当前操作系统文件路径分隔符以正常工作
  # 在Windows上。
  skip-files:
    - ".*\\.my\\.go$"
    - _test.go

  #  [ [ 默认情况下未设置。如果设置了，我们将其传递给 ] ]“go list-mod=｛option｝”。从“转到帮助模块”：
  #  [[如果使用-mod]]=readonly调用，则不允许从隐式
  #  [[如上所述的go]].mod的自动更新。相反，当任何更改时，它都会失败
  #  [[到go]].mod是需要的。此设置对于检查go.mod是否
  #  [[不需要更新，例如在连续集成和测试系统中。]]
  #  [[如果使用-mod]]=vendor调用，go命令将假定vendor
  #  [[目录保存依赖项的正确副本并忽略]]
  #  [[go]].mod中的依赖关系描述。
  # 如果设置，将其传递给 "go list -mod={option}"。
  # 可用值：readonly|vendor|mod
  # 默认情况下，它未设置。
  modules-download-mode: readonly

  # 允许多个并行运行的 golangci-lint 实例。
  # 如果为 false（默认值），golangci-lint 在启动时获取文件锁。
  allow-parallel-runners: true

# 输出配置选项
output:
  # 格式：彩色行号|行号|json |彩色选项卡|选项卡|检查样式|代码气候| junit xml|github actions|teamcity
  format: colored-line-number

  # 打印带有问题的代码行，默认为true
  print-issued-lines: true

  # 在问题文本的末尾打印筛选器名称，默认为true
  print-linter-name: true

  # 使问题输出逐行唯一，默认为true
  uniq-by-line: true

  # 在输出文件引用中添加前缀;默认为无前缀
  path-prefix: ""

  # 按:文件路径、行和列排序结果
  sort-results: true

# 特定链接的所有可用设置
linters-settings:
  asasalint:
    exclude:
      - Append
      - \.Wrapf
    # 启用/禁用asasalint内置的函数名称排除。
    # 默认值：true
    use-builtin-exclusions: false
    # 忽略 *_test.go文件。
    # 默认值：false
    ignore-test: false

  bidichk:
    # 下面的配置检查所有提到的不可见的unicode
    # runes. It can be omitted because all runes are enabled by default.
    left-to-right-embedding: true
    right-to-left-embedding: true
    pop-directional-formatting: true
    left-to-right-override: true
    right-to-left-override: true
    left-to-right-isolate: true
    right-to-left-isolate: true
    first-strong-isolate: true
    pop-directional-isolate: true

  cyclop:
    # 要报告的最大代码复杂性。
    # Default: 10
    max-complexity: 50
    # 最大平均包复杂度。
    # If it's higher than 0.0 (float) the check is enabled
    # Default: 0.0
    package-average: 0.0
    # 应忽略测试。
    # Default: false
    skip-tests: false

  decorder:
    # 文件中“type”、“const”、“var”和“func”声明的必需顺序。
    # 默认值：类型在常量之前，变量在函数之前。
    dec-order:
      - type
      - const
      - var
      - func
    # 如果为true，则根本不检查声明的顺序。
    # Default: true (disabled)
    disable-dec-order-check: false
    # 若为true，“init”func可以位于文件中的任何位置（不必在所有其他函数之前声明）。
    # Default: true (disabled)
    disable-init-func-first-check: false
    # 如果为true，则允许多个全局“type”、“const”和“var”声明。
    # Default: true (disabled)
    disable-dec-num-check: false
  depguard:
    rules:
      # Name of a rule.
      main:
        # List of file globs that will match this list of settings to compare against.
        # Default: $all
        files:
          - $all
          - $test
        # 允许的软件包列表。
        allow:
          - $gostd
        # 当值为建议时，不允许使用包.
        deny:
          - pkg: "github.com/sirupsen/logrus"
            desc: not allowed
          - pkg: "github.com/pkg/errors"
            desc: Should be replaced by standard lib errors package
  dogsled:
    # 检查带有太多空白标识符的赋值;默认为2
    max-blank-identifiers: 2
  dupl:
    # tokens count to trigger issue, 150 by default
    threshold: 100

  dupword:
    # Keywords for detecting duplicate words.
    # If this list is not empty, only the words defined in this list will be detected.
    # Default: []
    keywords:
      - "the"
      - "and"
      - "a"
  errcheck:
    # report about not checking of errors in type assertions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    # Default: false
    check-type-assertions: true

    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    # default is false: such cases aren't reported by default.
    # Default: false
    check-blank: true

    # [deprecated] comma-separated list of pairs of the form pkg:regex
    # the regex is used to ignore names within pkg. (default "fmt:.*").
    # see https://github.com/kisielk/errcheck#the-deprecated-method for details
    # ignore: GenMarkdownTree,os:.*,BindPFlags,WriteTo,Help
    # ignore: (os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*print(f|ln)?|os\.(Un)?Setenv

    # path to a file containing a list of functions to exclude from checking
    # see https://github.com/kisielk/errcheck#excluding-functions for details
    # exclude: errcheck.txt
    exclude-functions:
      - encoding/json.Marshal
      - encoding/json.MarshalIndent
      - io/ioutil.ReadFile
      - io.Copy(*bytes.Buffer)
      - io.Copy(os.Stdout)
  errchkjson:
    # Default: false
    check-error-free-encoding: true
    # Issue on struct encoding that doesn't have exported fields.
    # Default: false
    report-no-exported: false
  errorlint:
    # 检查fmt.Errorf是否对格式错误使用了%w谓词。
    errorf: true
    errorf-multi: true
    # Check for plain type assertions and type switches
    asserts: true
    # Check for plain error comparisons
    comparison: true

  exhaustive:
    check:
      - switch
      - map
    check-generated: true
    default-signifies-exhaustive: true
    package-scope-only: false
    ignore-enum-members: "Example.+"
    ignore-enum-types: "Example.+"
    explicit-exhaustive-switch: false
    explicit-exhaustive-map: false
  forbidigo:
    # Forbid the following identifiers (identifiers are written using regexp):
    forbid:
      - ^print.*$
      - 'fmt\.Print.*'
      - fmt.Println.* # too much log noise
      - ginkgo\\.F.* # these are used just for local development
    # Exclude godoc examples from forbidigo checks.  Default is true.
    exclude-godoc-examples: false
    analyze-types: false
  funlen:
    lines: 50
    statements: 50
  gci:
    # put imports beginning with prefix after 3rd-party packages;
    # only support one prefix
    # if not set, use goimports.local-prefixes
    prefix: github.com/marmotedu/iam
  gocognit:
    min-complexity: 30
  goconst:
    min-len: 3
    min-occurrences: 3
    ignore-tests: false
    match-constant: true
    numbers: false
    min: 3
    max: 3
    ignore-calls: true
  gocritic:
    enabled-checks:
      - nestingReduce
      - truncateCmp
      - unnamedResult
      - ruleguard
    disabled-checks:
      - regexpMust
      - ifElseChain
    enabled-tags:
      - performance
    disabled-tags:
      - experimental
    settings:
      captLocal:
        paramsOnly: false
      elseif:
        skipBalanced: false
      hugeParam:
        sizeThreshold: 80
      nestingReduce:
        bodyWidth: 5
      rangeExprCopy:
        sizeThreshold: 512
        skipTestFuncs: true
      rangeValCopy:
        sizeThreshold: 32
        skipTestFuncs: true
      ruleguard:
        rules: ""
      truncateCmp:
        skipArchDependent: false
      underef:
        skipRecvDeref: true
      unnamedResult:
        checkExported: true
  gocyclo:
    min-complexity: 30
  godot:
    # comments to be checked: `declarations`, `toplevel`, or `all`
    scope: all
    # list of regexps for excluding particular comment lines from check
    exclude:
      # example: exclude comments which contain numbers
      - '[0-9]+'
    period: true
    # check that each sentence starts with a capital letter
    capital: true
  godox:
    keywords:
      - TODO
      - BUG
      - FIXME
      - NOTE
      - OPTIMIZE # marks code that should be optimized before merging
      - HACK # marks hack-arounds that should be removed before merging
  gofmt:
    # simplify code: gofmt with `-s` option, true by default
    simplify: true
    rewrite-rules:
      - pattern: 'interface{}'
        replacement: 'any'
      - pattern: 'a[b:len(a)]'
        replacement: 'a[b:]'
  gofumpt:
    # Select the Go version to target. The default is `1.15`.
    lang-version: "1.15"

    # Choose whether to use the extra rules that are disabled
    # by default
    extra-rules: false

  # goheader:
  #   values:
  #     const:
  #     # define here const type values in format k:v, for example:
  #     # COMPANY: MY COMPANY
  #     regexp:
  #     # define here regexp type values, for example
  #     # AUTHOR: .*@mycompany\.com
  #   template:
  #     -
  #   template-path:
  #   # also as alternative of directive 'template' you may put the path to file with the template source
  goimports:
    # put imports beginning with prefix after 3rd-party packages;
    # it's a comma-separated list of prefixes
    local-prefixes: github.com/marmotedu/iam
  gomnd:
    settings:
      mnd:
        checks:
          - argument
          - case
          - condition
          - operation
          - return
          - assign
        # ignored-numbers: 1000
        # ignored-files: magic_.*.go
        # ignored-functions: math.*
  gomoddirectives:
    replace-local: true
    replace-allow-list:
      - google.golang.org/grpc
      - github.com/marmotedu/api
      - github.com/marmotedu/component-base
      - github.com/marmotedu/marmotedu-sdk-go
    retract-allow-no-explanation: false
    exclude-forbidden: false
  gomodguard:
    allowed:
      modules: # List of allowed modules
        - gorm.io/gorm
        - gorm.io/driver/mysql
        - k8s.io/klog
        # - gopkg.in/yaml.v2
      domains: # List of allowed module domains
        - google.golang.org
        - gopkg.in
        - golang.org
        - github.com
        - go.uber.org
        - go.etcd.io
    blocked:
      modules:
        - github.com/pkg/errors:
            recommendations:
              - github.com/marmotedu/errors
            reason: "`github.com/marmotedu/errors` is the log package used by marmotedu projects."
      versions:
        - github.com/MakeNowJust/heredoc:
            version: "> 2.0.9"
            reason: "use the latest version"
      local_replace_directives: false # Set to true to raise lint issues for packages that are loaded from a local path via replace directive

  gosec:
    # To select a subset of rules to run.
    # Available rules: https://github.com/securego/gosec#available-rules
    includes:
      - G401
      - G306
      - G101
    # To specify a set of rules to explicitly exclude.
    # Available rules: https://github.com/securego/gosec#available-rules
    excludes:
      - G204
    # Exclude generated files
    exclude-generated: true
    # Filter out the issues with a lower severity than the given value. Valid options are: low, medium, high.
    severity: "low"
    # Filter out the issues with a lower confidence than the given value. Valid options are: low, medium, high.
    confidence: "low"
    # To specify the configuration of rules.
    # The configuration of rules is not fully documented by gosec:
    # https://github.com/securego/gosec#configuration
    # https://github.com/securego/gosec/blob/569328eade2ccbad4ce2d0f21ee158ab5356a5cf/rules/rulelist.go#L60-L102
    config:
      G306: "0600"
      G101:
        pattern: "(?i)example"
        ignore_entropy: false
        entropy_threshold: "80.0"
        per_char_threshold: "3.0"
        truncate: "32"

  gosimple:
    # Select the Go version to target. The default is '1.13'.
    go: "1.15"
    # https://staticcheck.io/docs/options#checks
    checks: [ "all" ]

  govet:
    # report about shadowed variables
    check-shadowing: true

    # settings per analyzer
    settings:
      printf: # analyzer name, run `go tool vet help` to see all analyzers
        funcs: # run `go tool vet help printf` to see available settings for `printf` analyzer
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf

    # enable or disable analyzers by name
    enable:
      - atomicalign
    enable-all: false
    disable:
      - shadow
    disable-all: false
  importas:
    # if set to `true`, force to use alias.
    no-unaliased: true
    # List of aliases
    alias:
      # using `servingv1` alias for `knative.dev/serving/pkg/apis/serving/v1` package
      - pkg: knative.dev/serving/pkg/apis/serving/v1
        alias: servingv1
      # using `autoscalingv1alpha1` alias for `knative.dev/serving/pkg/apis/autoscaling/v1alpha1` package
      - pkg: knative.dev/serving/pkg/apis/autoscaling/v1alpha1
        alias: autoscalingv1alpha1
      # You can specify the package path by regular expression,
      # and alias by regular expression expansion syntax like below.
      # see https://github.com/julz/importas#use-regular-expression for details
      - pkg: knative.dev/serving/pkg/apis/(\w+)/(v[\w\d]+)
        alias: $1$2
    # using `jwt` alias for `github.com/appleboy/gin-jwt/v2` package
    jwt: github.com/appleboy/gin-jwt/v2
    # using `metav1` alias for `github.com/marmotedu/component-base/pkg/meta/v1` package
    metav1: github.com/marmotedu/component-base/pkg/meta/v1

  ireturn:
    # ireturn allows using `allow` and `reject` settings at the same time.
    # Both settings are lists of the keywords and regular expressions matched to interface or package names.
    # keywords:
    # - `empty` for `interface{}`
    # - `error` for errors
    # - `stdlib` for standard library
    # - `anon` for anonymous interfaces

    # By default, it allows using errors, empty interfaces, anonymous interfaces,
    # and interfaces provided by the standard library.
    allow:
      - anon
      - error
      - empty
      - stdlib
      # You can specify idiomatic endings for interface
      - (or|er)$

    # Reject patterns
    reject:
      - github.com\/user\/package\/v4\.Type

  lll:
    # max line length, lines longer will be reported. Default is 120.
    # '\t' is counted as 1 character by default, and can be changed with the tab-width option
    line-length: 240
    # tab width in spaces. Default to 1.
    tab-width: 4
  misspell:
    # Correct spellings using locale preferences for US or UK.
    # Default is to use a neutral variety of English.
    # Setting locale to US will correct the British spelling of 'colour' to 'color'.
    locale: US
    ignore-words:
      - someword
  nakedret:
    # make an issue if func has more lines of code than this setting, and it has naked returns; default is 30
    max-func-lines: 30

  nestif:
    # minimal complexity of if statements to report, 5 by default
    min-complexity: 4

  nilnil:
    # By default, nilnil checks all returned types below.
    checked-types:
      - ptr
      - func
      - iface
      - map
      - chan

  nlreturn:
    # size of the block (including return statement that is still "OK")
    # so no return split required.
    block-size: 1

  nolintlint:
    # Disable to ensure that all nolint directives actually have an effect. Default is true.
    allow-unused: false
    # Disable to ensure that nolint directives don't have a leading space. Default is true.
    allow-leading-space: true
    # Exclude following linters from requiring an explanation.  Default is [].
    allow-no-explanation: [ ]
    # Enable to require an explanation of nonzero length after each nolint directive. Default is false.
    require-explanation: false
    # Enable to require nolint directives to mention the specific linter being suppressed. Default is false.
    require-specific: true

  prealloc:
    # XXX: we don't recommend using this linter before doing performance profiling.
    # For most programs usage of prealloc will be a premature optimization.

    # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
    # True by default.
    simple: true
    range-loops: true # Report preallocation suggestions on range loops, true by default
    for-loops: false # Report preallocation suggestions on for loops, false by default

  promlinter:
    # Promlinter cannot infer all metrics name in static analysis.
    # Enable strict mode will also include the errors caused by failing to parse the args.
    strict: false
    # Please refer to https://github.com/yeya24/promlinter#usage for detailed usage.
    disabled-linters:
      - "Help"
      - "MetricUnits"
      - "Counter"
      - "HistogramSummaryReserved"
      - "MetricTypeInName"
      - "ReservedChars"
      - "CamelCase"
    #  - "lintUnitAbbreviations"

  predeclared:
    # comma-separated list of predeclared identifiers to not report on
    ignore: ""
    # include method names and field names (i.e., qualified names) in checks
    q: false
  rowserrcheck:
    packages:
      - github.com/jmoiron/sqlx
  revive:
    # see https://github.com/mgechev/revive#available-rules for details.
    ignore-generated-header: true
    severity: warning
    rules:
      - name: indent-error-flow
        severity: warning
  staticcheck:
    # Select the Go version to target. The default is '1.13'.
    go: "1.16"
    # https://staticcheck.io/docs/options#checks
    checks: [ "all" ]

  stylecheck:
    # Select the Go version to target. The default is '1.13'.
    go: "1.16"

    # https://staticcheck.io/docs/options#checks
    checks:
      [ "all", "-ST1000", "-ST1003", "-ST1016", "-ST1020", "-ST1021", "-ST1022" ]
    # https://staticcheck.io/docs/options#dot_import_whitelist
    dot-import-whitelist:
      - fmt
    # https://staticcheck.io/docs/options#initialisms
    initialisms:
      [
        "ACL",
        "API",
        "ASCII",
        "CPU",
        "CSS",
        "DNS",
        "EOF",
        "GUID",
        "HTML",
        "HTTP",
        "HTTPS",
        "ID",
        "IP",
        "JSON",
        "QPS",
        "RAM",
        "RPC",
        "SLA",
        "SMTP",
        "SQL",
        "SSH",
        "TCP",
        "TLS",
        "TTL",
        "UDP",
        "UI",
        "GID",
        "UID",
        "UUID",
        "URI",
        "URL",
        "UTF8",
        "VM",
        "XML",
        "XMPP",
        "XSRF",
        "XSS",
      ]
    # https://staticcheck.io/docs/options#http_status_code_whitelist
    http-status-code-whitelist: [ "200", "400", "404", "500" ]

  tagliatelle:
    # check the struck tag name case
    case:
      # use the struct field name to check the name of the struct tag
      use-field-name: true
      rules:
        # any struct tag type can be used.
        # support string case: `camel`, `pascal`, `kebab`, `snake`, `goCamel`, `goPascal`, `goKebab`, `goSnake`, `upper`, `lower`
        json: camel
        yaml: camel
        xml: camel
        bson: camel
        avro: snake
        mapstructure: kebab

  testpackage:
    # regexp pattern to skip files
    skip-regexp: (id|export|internal)_test\.go
  thelper:
    # The following configurations enable all checks. It can be omitted because all checks are enabled by default.
    # You can enable only required checks deleting unnecessary checks.
    test:
      first: true
      name: true
      begin: true
    benchmark:
      first: true
      name: true
      begin: true
    tb:
      first: true
      name: true
      begin: true

  tenv:
    # The option `all` will run against whole test files (`_test.go`) regardless of method/function signatures.
    # By default, only methods that take `*testing.T`, `*testing.B`, and `testing.TB` as arguments are checked.
    all: false

  unparam:
    # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false
  unused:
    # treat code as a program (not a library) and report unused exported identifiers; default is false.
    # XXX: if you enable this setting, unused will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find funcs usages. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false
  whitespace:
    multi-if: false # Enforces newlines (or comments) after every multi-line if statement
    multi-func: false # Enforces newlines (or comments) after every multi-line function signature

  wrapcheck:
    # An array of strings that specify substrings of signatures to ignore.
    # If this set, it will override the default set of ignored signatures.
    # See https://github.com/tomarrell/wrapcheck#configuration for more information.
    ignoreSigs:
      - .Errorf(
      - errors.New(
      - errors.Unwrap(
      - .Wrap(
      - .Wrapf(
      - .WithMessage(
      - .WithMessagef(
      - .WithStack(
    ignorePackageGlobs:
      - encoding/*
      - github.com/pkg/*

  wsl:
    # If true append is only allowed to be cuddled if appending value is
    # matching variables, fields or types online above. Default is true.
    strict-append: true
    # Allow calls and assignments to be cuddled as long as the lines have any
    # matching variables, fields or types. Default is true.
    allow-assign-and-call: true
    # Allow assignments to be cuddled with anything. Default is false.
    allow-assign-and-anything: false
    # Allow multiline assignments to be cuddled. Default is true.
    allow-multiline-assign: true
    # Allow declarations (var) to be cuddled.
    allow-cuddle-declarations: false
    # Allow trailing comments in ending of blocks
    allow-trailing-comment: false
    # Force newlines in end of case at this limit (0 = never).
    force-case-trailing-whitespace: 0
    # Force cuddling of err checks with err var assignment
    force-err-cuddling: false
    # Allow leading comments to be separated with empty liens
    allow-separated-leading-comment: false
  makezero:
    # Allow only slices initialized with a length of zero. Default is false.
    always: false
linters:
  # Default: false
  disable-all: true
  # 启用特定的 linter
  enable:
    - asasalint
    - asciicheck
    - bidichk
    - bodyclose
    - containedctx
    - contextcheck
    - cyclop
    - decorder
    - depguard
    - dogsled
    - dupl
    - dupword
    - durationcheck
    - errcheck
    - errchkjson
    - errname
    - errorlint
    - execinquery
    - exhaustive
    - exhaustruct
    - exportloopref
    - forbidigo
    - forcetypeassert
    - funlen
    - gci
    - ginkgolinter
    - gocheckcompilerdirectives
    - gochecknoglobals
    - gochecknoinits
    - gocognit
    - goconst
    - gocritic
    - gocyclo
    - godot
    - godox
    - goerr113
    - gofmt
    - gofumpt
    - goheader
    - goimports
    - gomnd
    - gomoddirectives
    - gomodguard
    - goprintffuncname
    - gosec
    - gosimple
    - gosmopolitan
    - govet
    - grouper
    - importas
    - ineffassign
    - interfacebloat
    - ireturn
    - lll
    - loggercheck
    - maintidx
    - makezero
    - mirror
    - misspell
    - musttag
    - nakedret
    - nestif
    - nilerr
    - nilnil
    - nlreturn
    - noctx
    - nolintlint
    - nonamedreturns
    - nosprintfhostport
    - paralleltest
    - prealloc
    - predeclared
    - promlinter
    - reassign
    - revive
    - rowserrcheck
    - sqlclosecheck
    - staticcheck
    - stylecheck
    - tagalign
    - tagliatelle
    - tenv
    - testableexamples
    - testpackage
    - thelper
    - tparallel
    - typecheck
    - unconvert
    - unparam
    - unused
    - usestdlibvars
    - varnamelen
    - wastedassign
    - whitespace
    - wrapcheck
    - wsl
    - zerologlint
  # 启用预设。
  # https://golangci-lint.run/usage/linters
  presets:
    - bugs
    - comment
    - complexity
    - error
    - format
    - import
    - metalinter
    - module
    - performance
    - sql
    - style
    - test
    - unused
  # 只运行启用的测试集中的快速测试(第一次运行不会很快)
  # Default: false
  fast: false

issues:
  exclude:
    - tools/.*
    - test/.*
    - third_party/.*
  exclude-rules:
    - linters:
        - errorlint
      path: (pkg/validator/.*)\.go
    - linters:
        - revive
      path: (log/.*)\.go

    - linters:
        - wrapcheck
      path: (cmd/.*|pkg/.*)\.go

    - linters:
        - typecheck
#            [[path]]: (pkg/storage/.*)\.go
      path: (internal/.*|pkg/.*)\.go

    - path: (cmd/.*|test/.*|tools/.*|internal/pump/pumps/.*)\.go
      linters:
        - forbidigo

    - path: (cmd/[a-z]*/.*|store/.*)\.go
      linters:
        - dupl

    - linters:
        - gocritic
      text: (hugeParam:|rangeValCopy:)

    - path: (cmd/[a-z]*/.*)\.go
      linters:
        - lll

    - path: (validator/.*|code/.*|validator/.*|watcher/watcher/.*)
      linters:
        - gochecknoinits

    - path: (internal/.*/options|internal/pump|pkg/log/options.go|internal/authzserver|tools/)
      linters:
        - tagliatelle

    - path: (pkg/app/.*)\.go
      linters:
        - deadcode
        - unused
        - varcheck
        - forbidigo
    - linters:
        - staticcheck
      text: "SA9003:"
    - linters:
        - lll
      source: "^//go:generate "
  exclude-use-default: true
  exclude-case-sensitive: false
  include:
    - EXC0002
  max-issues-per-linter: 0
  max-same-issues: 0
  new: false
  fix: true

severity:
  default-severity: error
  case-sensitive: true
  rules:
    - linters:
        - dupl
      severity: info
